<html py:extends="master.xhtml" py:strip="True">
<head py:block="head" py:strip="True">
    <title py:block="master_title">KS | Filters</title>
    <script id="PreconditionSimpleForm_template" type="text/html">
        <![CDATA[
        <form id="precondition-simple-form" class="form-horizontal" on-submit="submit-form">
            <div class="row mt-2 pb-3 mb-3 border-bottom">
                <h1 class="col type-page-title">${_('Simple filter')}</h1>
                <div class="col-md-auto text-right">
                    {{#if saving}}
                        ${_("Saving...")}
                    {{else}}
                        <button type="submit" class="btn btn-outline-success">
                            ${h.material_icon('save')}
                            ${_("Save")}
                        </button>
                    {{/if}}
                </div>
            </div>

            <div class="form-group row align-items-center">
                <div class="col-4">
                    <select id="selected_question" value="{{create.question}}"
                            class="custom-select {{errors.question ? 'is-invalid' : ''}}">
                        <option value="" disabled selected>${_('Select a question')}</option>
                        {{#each questions}}
                            <option value="{{._id}}">{{.title}}</option>
                        {{/each}}
                    </select>
                    {{#if errors.question}}<span class="invalid-feedback">{{errors.question}}</span>{{/if}}
                </div>
                <a href="${tg.url('/qa/new', params=dict(workspace=workspace, referrer='new_filter'))}"
                   id="create-filter" class="btn btn-outline-success d-inline-block">
                    ${h.material_icon('save')} ${_('New Question')}
                </a>
                <label for="selected_question" class="col help-text">
                    ${h.material_icon('help_outline')} ${_('Select the question to use for this filter.')}</label>
            </div>

            <div id="answer_type" class="">
                <div class="form-check">
                    <input class="form-check-input" type="radio" name="{{create.answer_type}}"
                           value="have_response" id="have_response" disabled="{{edit_mode}}"/>
                    <label class="form-check-label" for="have_response">
                        ${_('The question was just answered')}
                    </label>
                </div>

                <div class="form-group form-check">
                    <input type="radio" name="{{create.answer_type}}" value="what_response" id="what_response"
                           class="form-check-input {{errors.answer_type ? 'is-invalid' : ''}}" checked=""/>
                    <label class="form-check-label" for="what_response">
                        ${_('The user selects one of the following answers')}
                    </label>
                    {{#if errors.answer_type}}<span class="invalid-feedback">{{errors.answer_type}}</span>{{/if}}
                </div>
            </div>


            <div id="interested_response">
                <div class="form-group form-check-inline">
                    {{#each available_reponse}}
                        {{#if !edit_mode}}
                            <input class="form-check-input ml-4 {{errors.interested_response ? 'is-invalid' : ''}}"
                                   type="checkbox" name="{{create.interested_response}}" value="{{.}}" id="{{.}}"> {{.}}
                        {{else}}
                            {{#if create.interested_response == .}}
                                <input class="form-check-input ml-4 {{errors.interested_response ? 'is-invalid' : ''}}"
                                       type="radio" name="{{create.interested_response}}" value="{{.}}"
                                       checked> {{.}}
                            {{else}}
                                <input class="form-check-input ml-4 {{errors.interested_response ? 'is-invalid' : ''}}"
                                       type="radio" name="{{create.interested_response}}" value="{{.}}"> {{.}}
                            {{/if}}
                        {{/if}}
                    {{/each}}

                    {{#if errors.interested_response}}
                        <span class="ml-4 invalid-feedback">{{errors.interested_response}}</span>
                    {{/if}}
                </div>
            </div>

            <div class="form-group row align-items-center">
                <div class="col-4">
                    <input id="extra-fields-form-title" type="text" class="form-control {{errors.title ? 'is-invalid' : ''}}"
                           placeholder="${_('Label')}" name="{{create.title}}" value="{{create.title}}"/>
                    {{#if errors.title}}
                    <span class="invalid-feedback">{{errors.title}}</span>
                    {{/if}}
                </div>
                <label for="extra-fields-form-title" class="help-text">
                    ${h.material_icon('help_outline')}
                    ${_('This is a unique name that you will use to refer to this object in this workspace.')}
                </label>
            </div>
        </form>
        ]]>
    </script>
</head>

<body py:block="body" py:strip="True">
<div id="qa-ractive"></div>
<script>
//<![CDATA[
  var PreconditionSimple = Ractive.extend({
    template: '#PreconditionSimpleForm_template',
    oninit: function() {
      var self = this;
      var precondition = self.get('precondition');

      self.set('question_content', precondition['question_content']);
      self.set('question_title', precondition['question_title']);
      self.set('create.workspace', self.get('workspace'));

      //  Check if document is provided
      if (precondition['_id']) {
        self.set('submit_type', 'PUT');
        self.set('submit_url', "${tg.url('/precondition/simple/put')}");
        self.set('edit_mode', true);
        self.set('create.title', precondition['title']);
        self.set('create.question', precondition['condition'][0]);
        self.set('create.interested_response', precondition['condition'][1]);
        self.set('create._id', precondition['_id']);
      } else {
          self.set('create.question', self.get('qa_value'));
      }

      self.set('errors', {});
      self.set('saving', false);
      self.set('response_type', null);
      self.set('available_reponse', []);

      self.on('submit-form', function(event) {
        self.createPreconditionSimple();
        return false;
      });

      jQuery.get("${tg.url('/qa/valid_options', params=dict(workspace=workspace))}",
                 function(data) {
                    self.set('questions', data['questions']);
                 });
    },
    createPreconditionSimple: function() {
      var self = this;
      var api_params = JSON.stringify(self.get('create'));

      KS.ajax(self.get('submit_url'), api_params, function(resp) {
          if (resp.redirect_url) {
              window.location.replace(resp.redirect_url);
              return
          }

          var redirect_to;
          if (self.get('question_content') || self.get('question_title')) {
              redirect_to = "${tg.url('/qa/new', params=dict(workspace=workspace))}&question_content="
                      + self.get('question_content') + "&question_title=" + self.get('question_title') + "&precondition_id=" + resp['precondition_id'];
          } else {
               redirect_to = "${tg.url('/precondition/', params=dict(workspace=workspace))}";
          }
          self.set('create', {});
          self.set('saving', false);
          self.set('editing', false);
          window.location.replace(redirect_to);
      }, function(data) {
          self.set('errors', jQuery.parseJSON(data.responseText).errors);
          self.set('saving', false);
      });
    }
  });

  new PreconditionSimple({
      target: '#qa-ractive',
      data: {
          precondition: ${Markup(h.script_json_encode(precondition))},
          workspace: '${workspace}',
          edit_mode: false,
          submit_url: "${tg.url('/precondition/simple/post')}",
          submit_type: 'POST',
          qa_value: "${value_of('qa_value', '')}"
      },
      observe: {
          'create.question'(__) {
              this.set('available_response', [])
              jQuery.get("${tg.url('/qa/get_one')}", {'id': __}, data => {
                  this.set('available_reponse', data['qa']['answers'])
              });
          },
          'create.answer_type'(__) {
              if (__ == 'have_response') jQuery("#interested_response").hide();
              if (__ == 'what_response') jQuery("#interested_response").show();
          },
          'create.interested_response'(__) {
              var questions = this.get('questions');
              if (typeof questions === "undefined") return;
              var question = questions.filter(v => v._id === this.get('create.question'));
              if (!question.length) return;
              var q_title = question[0].title;
              var suffix = (__.length) ? " â‡’ " + __ : '${_(" was compiled")}';
              this.set('create.title', q_title+suffix);
          }
      }
  });
//]]>
</script>
</body>
</html>
