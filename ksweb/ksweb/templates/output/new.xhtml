<html py:extends="master.xhtml" py:strip="True">
<head py:block="head" py:strip="True">
    <title py:block="master_title">KS | Output</title>
    <link rel="stylesheet" href="//cdn.jsdelivr.net/simplemde/latest/simplemde.min.css" />
    <script src="//cdn.jsdelivr.net/simplemde/latest/simplemde.min.js"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/showdown/1.8.6/showdown.min.js"></script>
    <script id="template" type="text/html">
        <![CDATA[
        <form class="form-horizontal" on-submit="submit-form">
            <div class="row mt-2 pb-3 mb-3 border-bottom">
                <h1 class="col type-page-title">${_("New Output")}</h1>
                <div class="col-md-auto text-right">
                    {{#if edit_mode }}
                        <button type="button" class="btn btn-outline-warning"
                            onclick='ractive_output.create_output_plus();'>${h.material_icon('create')} ${_('Create Output+')}
                        </button>
                    {{/if}}
                    {{#if saving}}
                        ${_("Saving...")}
                    {{else}}
                        <button type="submit" class="btn btn-outline-success">${h.material_icon('save')} ${_("Save")}</button>
                    {{/if}}
                </div>
            </div>

            <div class="form-group row align-items-center">
                <div class="col-4">
                    <input id="form-title" type="text" class="form-control {{errors.title ? 'is-invalid' : ''}}"
                           placeholder="${_('Label')}" value="{{create.title}}"/>
                    {{#if errors.title}}<span class="invalid-feedback">{{errors.title}}</span>{{/if}}
                </div>
                <div class="col">
                    <label for="form-title" class="help-text">${h.material_icon('help_outline')} ${_('This is a unique name that you will use to refer to this object in this workspace.')}</label>
                </div>
                <div class="col">
                    <h5 class="text-primary">Dependencies</h5>
                    ${h.dependencies(output)}
                </div>
            </div>

            <div class="form-group row align-items-center">
                <div class="col-4">
                    <select id="form-precondition" class="custom-select {{errors.precondition ? 'is-invalid' : ''}}"
                            value="{{create.precondition}}">
                        <option value="" selected>${_('Choose a filter (select a Q/A)')}</option>
                        {{#each preconditions}}
                            <option value="{{._id}}">{{{.title}}}</option>
                        {{/each}}
                    </select>
                    {{#if errors.precondition}}<span class="help-block">{{errors.precondition}}</span>{{/if}}
                </div>
                <div class="col-md-auto align-self-center">
                    <a href="${tg.url('/precondition/open')}?_id={{create.precondition}}" target="_blank">${h.material_icon('launch')}</a>
                </div>
                <div class="col">
                     <a target="_blank" href="${tg.url('/precondition/simple/new', params=dict(workspace=workspace))}" id="create-filter"
                           class="btn btn-outline-success d-inline-block">${h.material_icon('save')} ${_('New Simple Filter')}</a>
                </div>
            </div>

            <div class="row align-items-center">
                <div class="col-4 h5 text-primary my-3">${_('Available answers')}</div>
                <label class="col help-text">${h.material_icon('help_outline')} ${_('Please select the Answer to the Question that you want to use in this Output.')}</label>
            </div>

            {{#each qas}}
                <div class="row">
                    <div class="col">
                        <a id="{{._id}}"
                            onclick='ractive_output.add_answer_to_editor("{{._id}}")'
                            class="add_circle_outline cursor-pointer">
                                ${h.material_icon('add_circle_outline')}
                            <span>{{{.title}}}</span>
                        </a>
                    </div>
                </div>
            {{/each}}


            <h5 class="text-primary mt-2">Output editor</h5>
            {{#if errors.content}}
            <div class="form-group {{errors.content ? 'has-error' : ''}} col-md-12">
                <span class="help-block">{{errors.content}}</span>
            </div>
            {{/if}}
            <div class="row">
                <div class="form-group col">
                    <textarea id="ks_editor" name="ks_editor" class="form-control {{errors.html ? 'is-invalid' : ''}}"></textarea>
                    {{#if errors.html}}<span class="invalid-feedback">{{errors.html}}</span>{{/if}}
                </div>
            </div>
            <label for="ks_editor" class="help-text">${h.material_icon('help_outline')} ${_('To create an Output from a text, highlight it with your mouse and click on the orange button Create Output+')}</label>

        </form>
        ]]>
    </script>
</head>

<body py:block="body" py:strip="True">
<div id="target"></div>

<script>
//<![CDATA[
    var OutputEditor = Ractive.extend({
        template: '#template',
        on: {
            init() {
                var self = this;
                self.set('edit_mode', false);
                self.set('qas', []);
                self.set('create.workspace', self.get('workspace'));
                self.set('create.precondition', self.get('output')['_precondition']);

                if (self.get('output')['_id']) {
                    self.set('edit_mode', true);
                    self.set('submit_url', '${tg.url("/output/put")}');
                    self.set('create.title', self.get('output')['title']);
                    self.set('create._id', self.get('output')['_id']);
                }

                self.set('errors', {});
                self.set('saving', false);
                self.on('submit-form', function () {
                    return self.create_output();
                });

                jQuery.get("${tg.url('/precondition/available_preconditions', params=dict(workspace=workspace))}",
                           data => {self.set('preconditions', data['preconditions'])})
            },
            render() {
                var editor = KS.editor(jQuery("#ks_editor")[0]);
                this.set('editor', editor);
                if (this.get('edit_mode'))
                    editor.value(${Markup(h.script_json_encode(output['html']))});
                editor.codemirror.on('change', function() {
                    jQuery(window).bind('beforeunload', function(){
                        return "${_('Unsaved data! Are you sure you want to leave?')}";
                    });
                });
            }
        },
        create_output: function() {
            this.set('saving', true);
            jQuery(window).unbind('beforeunload');

            if (!this.get('create.precondition'))
                alert('${_("You have not selected a Filter. Are you sure you want to create an output without a filter?")}')

            let params = this.get('create');
            params['html'] = this.get('editor').value();

            KS.ajax(this.get('submit_url'),
                    JSON.stringify(params),
                    result => {
                        let redirect_to = "${tg.url('/output/', params=dict(workspace=workspace))}";
                        this.set('create', {});
                        this.set('saving', false);
                        this.set('editing', false);
                        if (result.redirect_url)
                            redirect_to = result.redirect_url;
                        window.location.replace(redirect_to);
                    },
                    data => {
                        this.set('errors', data.responseJSON.errors);
                        this.set('saving', false);
                    });
            return false;
        },
        add_output_to_editor: function(id) {
            KS.addOutputToEditor(id, this.get('editor'))
        },
        add_answer_to_editor: function(id) {
            KS.addAnswerToEditor(id, this.get('editor'))
        },
        create_output_plus: function() {
            var self = this;
            var highlighted_text = self.get('editor').codemirror.getSelection();

            if (highlighted_text === ''){
                alert('${_("ATTENTION: you dont have highlighted any text.")}');
                return;
            }

            KS.ajax("${tg.url('/output_plus')}",
                    JSON.stringify({
                        'highlighted_text': highlighted_text,
                        'list_': KS.getEntitiesList(highlighted_text),
                        'workspace': self.create.workspace
                    }),
                    function(resp) {
                        alert("${_('An Output without filter was automatically created from ')} '" + highlighted_text +"'.");
                        self.add_output_to_editor(resp['_id']);
                    });
        }
    });

    var ractive_output = new OutputEditor({
        target: '#target',
        data: {
            output: ${Markup(h.script_json_encode(output))},
            workspace: '${workspace}',
            submit_type: 'POST',
            submit_url: "${tg.url('/output/post')}"
        },

        observe: {
            'create.precondition'(___) {
                var self = this;
                if (!___)
                    return;

                $.get("${tg.url('/precondition/qa_precondition', params=dict(workspace=workspace),qualified=True)}",
                      {id: ___},
                      function (data) {
                        self.set('qas', data['qas']);
                        // TODO: if qas do not match within the md editor content, should highlight them in some way
                      });
            }
        }
    });
//]]>
    </script>
</body>
</html>
