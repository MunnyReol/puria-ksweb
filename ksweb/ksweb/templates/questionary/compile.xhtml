<html py:extends="master.xhtml" py:strip="True">
<head py:block="head" py:strip="True">
<title py:block="master_title">KS | Form</title>
<script src="//cdnjs.cloudflare.com/ajax/libs/showdown/1.8.6/showdown.min.js"></script>
<script id="compile_questionary_template" type="text/html">
<![CDATA[
    <div class="row mt-2">
        <h1 class="col type-page-title">${_('Complete the form')}: {{questionary.title}}</h1>
        <div class="col-md-auto text-right">
            <a href="${tg.url('/questionary/download', params={'_id': questionary._id})}"
               class-disabled='!quest_compiled.completed'
               class-btn-outline-success="quest_compiled.completed"
               class="btn btn-outline">
                    ${h.material_icon('download')} Download
            </a>
            <button type="button" class="btn btn-outline"
                    class-disabled='!quest_compiled.completed'
                    class-btn-outline-success="quest_compiled.completed"
                    {{#if !quest_compiled.completed}}disabled{{/if}}
                    on-click="print_questionary">
                        ${h.material_icon('print')} Print result
            </button>
        </div>
    </div>

    <div class="row border-bottom">
        <p class="col">Please answer to the questions below</p>
    </div>

        <div class="row">
            <div class="col">
                {{#if !quest_compiled.completed}}
                <pre class="form-group pt-4 h4" style="overflow: hidden">{{{qa.question}}}</pre>
                <div class="form-group form-check answer pl-0">
                    {{#if qa.type == 'text'}}
                      <textarea class="form-control" class-is-invalid="errors.qa_response">{{qa_response}}</textarea>
                    {{else}}
                      {{#each qa.answers}}
                        {{#if qa.type == 'single'}}
                            <input type="radio" 
                                class-is-invalid="errors.qa_response"
                                class="form-check-input mx-2 px-2" name="{{qa_response}}" value="{{.}}"/>
                            <pre class="mx-5 h6" style="overflow: hidden">{{.}}</pre>
                        {{/if}}
                        {{#if qa.type == 'multi'}}
                            <input type="checkbox" 
                                class-is-invalid="errors.qa_response"
                                class="form-check-input mx-2 px-2" name="{{qa_response}}" value="{{.}}">
                            <pre class="mx-5 h6" style="overflow: hidden">{{.}}</pre>
                        {{/if}}
                      {{/each}}
                    {{/if}}
                    {{#if errors.qa_response}}
                        <span class="invalid-feedback">{{errors.qa_response}}</span>
                    {{/if}}
                </div>
                {{else}}
                <div class="alert alert-success my-5" role="alert">
                    <h4 class="alert-heading">Form completed</h4>
                </div>
                {{/if}}
                <button type="button" 
                        {{previous_disabled_attr}}
                        class-disabled="previous_disabled" 
                        class-btn-outline-light="!previous_disabled" 
                        class="btn questionary_control mr-5"
                        on-click="previous_question">${_('Prev')}
                </button>
                {{#if saving}}
                <button type="button" class="btn btn-disabled text-right questionary_control disabled">${_('Saving...')}</button>
                {{else}}
                <button type="button" 
                        class-disabled="next_disabled"
                        class-btn-outline-success="!next_disabled" 
                        class="btn  questionary_control ml-5"
                        {{next_disabled_attr}}
                        on-click="submit_response">${_('Next')}
                </button>
                {{/if}}
            </div>
        </div>
        <div class="row mt-4">
            <div class="col-4 mr-2">
                <h2 class="text-primary">Q/A Recap</h2>
                <hr/>
                <dl>
                    {{#each recap}}
                    <dt class="text-muted">{{question}}</dt>
                    <dd class="text-muted">{{answer}}</dd>
                    {{/each}}
                </dl>
            </div>
            <div id="html" class="col ml-2 z-depth-5">
                <h2 class="text-primary">Preview</h2>
                <hr/>
                {{{@.makeHtml()}}}
            </div>
        </div>
        ]]>
    </script>

</head>

<body py:block="body" py:strip="True">

<div id="compile_questionary" class="pt-2"></div>

<script>
    var CompileQuestionary = Ractive.extend({
        template: '#compile_questionary_template',

        onconstruct: function (options) {
            var self = this;
            self.questionary = options['questionary'];
            self.quest_compiled = options['quest_compiled'];
            self.html = options['html'];
            self.recap = options['recap']
            self.qa_response = [];
        },
        oninit: function () {
            var self = this;
            self.set('questionary', self.questionary);
            self.set('quest_compiled', self.quest_compiled);
            self.set('html', self.html);
            self.set('qa_response', self.qa_response);
            self.checkButtons();
            self.set('errors', {});
            self.set('recap', self.recap)
            self.next_qa();
        },
        next_qa: function () {
            var self = this;

            if (!self.get('quest_compiled.completed')) {
                var qa_id = self.get('quest_compiled.qa');
                jQuery.get("${tg.url('/qa/get_one')}", {'id': qa_id}, function (data) {
                    self.set('qa', data['qa']);
                });
            }
        },
        questionary_completed: function () {
            var _url = "${tg.url('/questionary/completed', params=dict(_id=questionary._id))}";
            window.location.replace(_url);
        },
        checkButtons: function () {
            var self = this;
//<![CDATA[
            self.set('previous_disabled_attr', undefined)
            self.set('next_disabled_attr', undefined)
            var previous_disabled = $.isEmptyObject(self.get('questionary.qa_values')) 
                                    && !self.get('quest_compiled.completed')
            var next_disabled = self.get('quest_compiled.completed');
            
            self.set('previous_disabled', previous_disabled);
            (previous_disabled) ? self.set('previous_disabled_attr', 'disabled') : null;
            
            self.set('next_disabled', next_disabled);
            (next_disabled) ? self.set('next_disabled_attr', 'disabled') : null;
//]]>
        },
        makeHtml: function () {
            return KS.getMDConverter().makeHtml(this.get('html'));
        }
    });
</script>

<script>
    var compile_questionary = new CompileQuestionary({
        el: '#compile_questionary',
        quest_compiled: ${Markup(h.script_json_encode(quest_compiled))},
        questionary: ${Markup(h.script_json_encode(questionary))},
        html: ${Markup(h.script_json_encode(html))},
        recap: ${Markup(h.script_json_encode(recap))},
    });
    compile_questionary.on('previous_question', function (event) {
        var self = this;
        var params = {
            '_id': self.get('questionary._id')
        };
        self.set('saving', true);

        var api_params = JSON.stringify(params);

        $.post({
            dataType: "json",
            contentType: 'application/json',
            processData: false,
            url: '${tg.url('/questionary/previous_question')}',
            data: api_params,
        }).done(function (data) {
            self.set('saving', false);
            self.set('questionary', data['questionary']);
            self.set('quest_compiled', data['quest_compiled']);
            self.set('html', data['html']);
            self.set('qa_response', data['previous_response']);
            self.set('recap', data['recap']);
            self.set('errors', {});
            self.checkButtons();
            self.next_qa();
        }).fail(function (jqXHR) {
            var data = jQuery.parseJSON(jqXHR.responseText);
            self.set('errors', data.errors);
            self.set('saving', false);
        });

    });

    compile_questionary.on('submit_response', function (event) {
        var self = this;
        var params = {
            '_id': self.get('questionary._id'),
            'qa_id': self.get('quest_compiled.qa'),
            'qa_response': self.get('qa_response')
        };
        self.set('saving', true);
        var api_params = JSON.stringify(params);

        $.post({
            dataType: "json",
            processData: false,
            contentType: 'application/json',
            url: '${tg.url('/questionary/responde')}',
            data: api_params,
        }).done(function (data) {
            self.set('qa_response', undefined);
            self.set('saving', false);
            self.set('questionary', data['questionary']);
            self.set('quest_compiled', data['quest_compiled']);
            self.set('html', data['html']);
            self.set('recap', data['recap']);
            self.set('errors', {});
            self.checkButtons();
            self.next_qa();
        }).fail(function (jqXHR) {
            var data = jQuery.parseJSON(jqXHR.responseText);
            self.set('errors', data.errors);
            self.set('saving', false);
        });
    });

<![CDATA[
    compile_questionary.on('print_questionary', function () {
        var self = this;
        var html = $('#html')
        html.find('.entity').remove()
        KS.printDocument(
            "${tg.url('/css/print.css', qualified=True)}",
            self.questionary.title,
            html.wrap("<div>").parent().html().replace(/(\\)?#{([^\W]+)\b}/g, '')
        );
        return true;
]]>
    });

</script>
<div style="display: none;">
    <div py:for="(title, hash) in questionary.children_titles">
        <div id="${hash}">
            <span>${title}</span>
        </div>
    </div>
    <div py:for="(id, response) in questionary.qa_values.items()">
        <div id="${h.i2h(id)}">
            <span>${response.qa_response}</span>
        </div>
    </div>
</div>
</body>
</html>
